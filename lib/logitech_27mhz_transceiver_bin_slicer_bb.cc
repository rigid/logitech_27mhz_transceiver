/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <logitech_27mhz_transceiver_bin_slicer_bb.h>
#include <gr_io_signature.h>

/*
 * Create a new instance of logitech_27mhz_transceiver_bin_slicer_bb and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
logitech_27mhz_transceiver_bin_slicer_bb_sptr 
logitech_27mhz_transceiver_make_bin_slicer_bb ()
{
  return logitech_27mhz_transceiver_bin_slicer_bb_sptr (new logitech_27mhz_transceiver_bin_slicer_bb ());
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;	// mininum number of input streams
static const int MAX_IN = 1;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
logitech_27mhz_transceiver_bin_slicer_bb::logitech_27mhz_transceiver_bin_slicer_bb ()
  : gr_block ("bin_slicer_bb",
	      gr_make_io_signature (MIN_IN, MAX_IN, sizeof (unsigned char)),
	      gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (unsigned char)))
{
  history_size = 50;
  set_history(history_size);
}

/*
 * Our virtual destructor.
 */
logitech_27mhz_transceiver_bin_slicer_bb::~logitech_27mhz_transceiver_bin_slicer_bb ()
{
  // nothing else required
}

int 
logitech_27mhz_transceiver_bin_slicer_bb::general_work (int noutput_items,
			       gr_vector_int &ninput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
  const unsigned char *in = (unsigned char *) input_items[0];
  unsigned char *out = (unsigned char *) output_items[0];


  #define VERBOSE 0

  float max_val = -9999999;
  float min_val = 9999999;
  float center_offset = 0;
  float trig_val = 0;
  bool signal_found;
  int j=0;

  float last_val = 0;
  int hold = 0;
  int changed = 0;
  int n=0;
  int k=0;
  int m=0;
  bool pol=1;


  bool error=false,startseq=false;


// search change in history; if not, stay
for (j = 1; j < history_size-1; j++){ // till 48
  // HOLD
  if (in[j]==in[j-1]) {
    hold++;
  }
  // CHANGE
  else {
    hold=1;
  }
}



  for (int i = (history_size-1); i <= noutput_items+history_size-2; i++){

	// HOLD
	if (in[i]==in[i-1]) {
	    hold++;
	    if(hold>59 && (hold%5==0)) {
	        out[k++]=0;
	    }

//	    printf("HOLD   - [%d]%1.0f | %i\n",i,out[i],hold);
	}
	// CHANGE
	else {
	    // change pol
	    pol=in[i-1];

	    changed++;
//	    printf("[%d] CHANGED SIGNAL - HELD %d times before [%d]\n",changed,hold,i);
	    if (hold>=7 && hold<=13) {
		if (VERBOSE) printf("[%4d] CHANGED SIGNAL -- T1   -- HELD %4d times before [%4d]\n",changed,hold,i);
		//p_arr[n]=10;
		//p_arr[n]=0x3; // 00 or 11
		out[k++]=pol; out[k++]=pol; // 00 or 11
	    }
	    else if (hold>=15 && hold<=18) {
		if (VERBOSE) printf("[%4d] CHANGED SIGNAL -- T1.5 -- HELD %4d times before [%4d]\n",changed,hold,i);
		//p_arr[n]=15;
		//p_arr[n]=0x7; // 111
		out[k++]=pol; out[k++]=pol; out[k++]=pol; // 000 or 111
	    }
	    else if (hold>=20 && hold<=25) {
		if (VERBOSE) printf("[%4d] CHANGED SIGNAL -- T2   -- HELD %4d times before [%4d]\n",changed,hold,i);
		//p_arr[n]=20;
		//p_arr[n]=0xf; // 1111
		out[k++]=pol; out[k++]=pol; out[k++]=pol; out[k++]=pol; // 0000 or 1111
	    }
	    else if (hold>=28 && hold<=35) {
		out[k++]=pol; out[k++]=pol; out[k++]=pol; out[k++]=pol; out[k++]=pol; out[k++]=pol; // 000000 or 111111
		if (VERBOSE) printf("[%4d] START/STOP SEQUENCE - CHANGED SIGNAL --    T3   -- HELD %4d times before [%4d] [val_i: %f]\n",changed,hold,i,in[i-1]);
	    }
	    else if (hold>35) {
		if (VERBOSE) printf("[%4d] NO SIGNAL -- HELD %4d times before [%4d]\n",changed,hold,i);
	    }
	    else {
		//if (VERBOSE) printf("-------ERROR -------[%4d] CHANGED SIGNAL -- UNDEF -- HELD %4d times before [%4d]\n",changed,hold,i);
	    }

	    hold=1;
	    //printf("CHANGE - [%d]%1.0f\n",i,out[i]);
	}
}    

/**********/

//printf("-------noutput_items[%d]---k:%d----history_size:%d\n",noutput_items,k,history_size);

  consume_each (noutput_items);

  /*
  printf("-------k:[%d]-----",k);
  for (int i =0; i<k;i++) {
    printf("%x ",out[i]);
  }
  printf("-------\n");
  */

  // Tell runtime system how many output items we produced.
  return k;//noutput_items;
}
